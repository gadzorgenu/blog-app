{"version":3,"sources":["validation.js","../../../src/grid.tsx","components/Form/SignUpForm.js","pages/signUp.js"],"names":["LoginSchema","Yup","email","required","password","SignUpSchema","firstname","lastname","phone","confirmPassword","oneOf","Grid","forwardRef","props","ref","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","__css","SignUpForm","useState","show","setShow","handleClick","pt","textAlign","my","as","fontSize","md","initialValues","validationSchema","onSubmit","values","console","log","errors","handleSubmit","touched","handleChange","mx","gap","variant","name","placeholder","value","mt","borderColor","error","onChange","px","size","type","mb","h","w","rounded","onClick","colorScheme","base","to","href","color","Login"],"mappings":"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","file":"static/js/7.6cc7edf0.chunk.js","sourcesContent":["import * as Yup from 'yup'\n\nexport const LoginSchema = Yup.object({\n    email: Yup.string().email('Invalid email format').required('Required'),\n    password: Yup.string().required('Required')\n})\n\nexport const SignUpSchema = Yup.object({\n    firstname: Yup.string().required('Firstname is required'),\n    lastname: Yup.string().required('Lastname is required'),\n    email: Yup.string().email('Invalid email format').required('Email required'),\n    phone: Yup.number().required('Phone number required'),\n    password: Yup.string().required('Password required'),\n    confirmPassword: Yup.string()\n    .oneOf([ Yup.ref('password'), null ], 'Passwords must match')\n})","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/components/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">(function GridItem(\n  props,\n  ref,\n) {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","\nimport React, {useState} from 'react'\nimport {Formik,Form} from 'formik'\n  import { Box, Heading,Input,InputGroup,Text, Grid,InputRightElement,Link, Button} from '@chakra-ui/react'\n  import {SignUpSchema} from '../../validation'\n\n  const  SignUpForm = ()=> {\n\n    const [show, setShow ] = useState(false)\n\n    const handleClick=()=> {\n        setShow(!show)\n    }\n\n    const initialValues = {\n        firstname:'',\n        lastname:'',\n        phone:'',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    }\n\n    const onSubmit = (values )=> {\n        console.log( 'Data',values)\n    }\n\n    return(\n        <Box pt={10}>\n            <Box textAlign='center' my={4}>\n                <Heading as='h5' fontSize={{ md: '3xl'}}> SIGN UP</Heading>\n            </Box>\n            <Formik\n                initialValues={initialValues}\n                validationSchema = {SignUpSchema}\n                onSubmit= {onSubmit}\n            >\n                {({\n                values,\n                errors,\n                touched,\n                handleSubmit,\n                handleChange,\n              }) => (\n                    <Form onSubmit={handleSubmit}>\n                        <Box mx={{md:'400px'}}>\n                            <Grid templateColumns='repeat(2,1fr)' gap={6}>\n                            <Input \n                                variant=\"flushed\" \n                                name='firstname' \n                                placeholder=\"Enter firstname\" \n                                value={values.firstname}\n                                mt={6} \n                                borderColor='black'\n                                error={errors.firstname}\n                                onChange={handleChange}\n                                px={4}\n                                />\n                                 <Input \n                                variant=\"flushed\" \n                                name='lastname' \n                                placeholder=\"Enter lastname\" \n                                value={values.lastname}\n                                mt={6} \n                                borderColor='black'\n                                error={errors.lastname}\n                                onChange={handleChange}\n                                px={4}\n                                />\n                            </Grid>\n                            <Grid templateColumns='repeat(2,1fr)' gap={6}>\n                                <Input \n                                    variant=\"flushed\" \n                                    name='email' \n                                    placeholder=\"Enter email\" \n                                    value={values.email}\n                                    mt={6} \n                                    borderColor='black'\n                                    error={errors.email}\n                                    onChange={handleChange}\n                                    px={4}\n                                />\n                                <Input \n                                    variant=\"flushed\" \n                                    name='phone' \n                                    placeholder=\"Enter phone number\" \n                                    value={values.phone}\n                                    mt={6} \n                                    borderColor='black'\n                                    error={errors.phone}\n                                    onChange={handleChange}\n                                    px={4}\n                                />\n                                </Grid>\n                            <Grid templateColumns='repeat(2,1fr)' gap={6}>\n                                <InputGroup size=\"md\" my={4}>\n                                    <Input\n                                    variant=\"flushed\"\n                                    type={show ? \"text\" : \"password\"}\n                                    placeholder=\"Enter password\"\n                                    borderColor='black'\n                                    value={values.password}\n                                    name='password'\n                                    onChange={handleChange}\n                                    mb={4}\n                                    px={4}\n                                    />\n                                <InputRightElement >\n                                <Button h='25px' w='45px' fontSize=\"10px\" rounded='5px' my={4} onClick={handleClick}>\n                                    {show ? \"Hide\" : \"Show\"}\n                                </Button>\n                                </InputRightElement>\n                            </InputGroup>\n                            <InputGroup size=\"md\" my={4}>\n                                    <Input\n                                    variant=\"flushed\"\n                                    type={show ? \"text\" : \"password\"}\n                                    placeholder=\"Confirm password\"\n                                    borderColor='black'\n                                    value={values.confirmPassword}\n                                    name='confirmPassword'\n                                    onChange={handleChange}\n                                    mb={4} px={4}\n                                    />\n                                <InputRightElement >\n                                <Button h='25px' w='45px' fontSize=\"10px\" rounded='5px' my={4} onClick={handleClick}>\n                                    {show ? \"Hide\" : \"Show\"}\n                                </Button>\n                                </InputRightElement>\n                            </InputGroup>\n                            </Grid>\n                            \n                                <Button type='submit' colorScheme='pink' size='md' w={{base:'100%', md:'80%'}} > <Link to='/post'>Sign up </Link>\n                                </Button>\n                                <Text mt={2}>Already have an account? <Link href='/login' color='blue.500'>Login</Link></Text>\n                        </Box>\n                    </Form>\n                )}\n            </Formik>\n        </Box>\n    )\n\n  }\n\n  export default SignUpForm\n","import React from 'react'\nimport SignUpForm from '../components/Form/SignUpForm'\n\nfunction Login(){ \n\n  return(\n    <SignUpForm/>\n  \n  )\n  \n}\nexport default Login"],"sourceRoot":""}